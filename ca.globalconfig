#################################################################################
#
# .NET Code Style Configurations
#
# For details, see: https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/configuration-files?view=vs-2019#global-analyzerconfig
#
# You can find the latest version of this file here: https://github.com/skrysmanski/AppMotor.StyleGuide
#
#################################################################################

is_global = true

dotnet_style_qualification_for_field = true:suggestion
dotnet_style_qualification_for_property = true:suggestion
dotnet_style_qualification_for_method = false:suggestion
dotnet_style_qualification_for_event = true:suggestion

dotnet_sort_system_directives_first = true:suggestion
dotnet_separate_import_directive_groups = true:suggestion

#
# Code analysis rules
#
# For configuration options, see: https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/configuration-options
#
# For each rule, see: https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/caXXXX
#
# The Roslyn Analyzers project: https://github.com/dotnet/roslyn-analyzers
#

# CA1031: Do not catch general exception types
# Reason: There are lots of places (especially in reusable library code) that make catching "Exception"
#   necessary/useful. In my experience with this rule, it's suppressed 99% of the time - making it more of
#   an annoyance than a helpful rule.
dotnet_diagnostic.CA1031.severity = none

# CA1032: Implement standard exception constructors
# Reason: This rule does not provide any real benefit but on the other hand limits the code design unnecessarily.
dotnet_diagnostic.CA1032.severity = none

# CA1040: Avoid empty interfaces
# Reason: This rule does not provide any real benefit but on the other hand limits the code design unnecessarily.
dotnet_diagnostic.CA1040.severity = none

# CA1062: Validate arguments of public methods
# Reason: With C#'s nullable reference types enabled, this rule is less useful (as the compiler already checks this).
#   One could argue that this rule is still useful for consumers with NRT disabled - but we simply require NRT to
#   be enabled for consumer and reduce the noise of this rule by disabling it.
dotnet_diagnostic.CA1062.severity = none

# CA1303: Do not pass literals as localized parameters
# Reason: Library projects should have this enabled and provide a LocalizableResources.resx file (Resources File) for the
#   texts they display to the user (English-only is sufficient; internal visibility is sufficient). This way they
#   can later be translated by consumers of this library, if they want the texts in other languages as well. Application
#   projects, on the other hand, may want to set this to "none" (possibly in a separate .editorconfig file) if there is
#   no plan to translate the application into other languages.
dotnet_diagnostic.CA1303.severity = error

# CA1307: Specify StringComparison for clarity
# Reason: Creates too much noise (this is actually the reason why CA1307 was extracted from CA1310).
dotnet_diagnostic.CA1307.severity = none

# CA1308: Normalize strings to uppercase
# Reason: In almost all cases this rule is irrelevant - and just causes noise. (I've yet to see an example of the problem
#   this rule is supposed to prevent.)
dotnet_diagnostic.CA1308.severity = none

# CA1700: Do not name enum values 'Reserved'
# Reason: Left over from old "worst-pratice" implementations. We don't do this. If left enabled it
#   prevents naming an enum member "ReservedName", even though this is a valid name.
dotnet_diagnostic.CA1700.severity = none

# CA1707: Identifiers should not contain underscores
# Reason: Our style guide uses underscores for constants.
dotnet_diagnostic.CA1707.severity = none

# CA1711: Identifiers should not have incorrect suffix
# Reason: While it may be useful in general, it just produces too many false positives (especially for
#   developers who know what they're doing and explicitly want to name a certain type that way).
dotnet_diagnostic.CA1711.severity = none

# CA1716: Identifiers should not match keywords
# Reason: I've yet to encounter a problem caused by violating this rule. At the moment, I don't know
#   and can't think of any. So we'll leave this rule disabled until we find some case where it's really
#   useful.
dotnet_diagnostic.CA1716.severity = none

# CA1717: Only FlagsAttribute enums should have plural names
# Reason: That's a matter of preference. On the other hand, allowing plural enum name resolves name conflicts if
#   the enum is a nested enum and there's a property for that enum in the outer class.
dotnet_diagnostic.CA1717.severity = none

# CA2225: Operator overloads have named alternates
# Reason: This rule is "nice" but makes writing operators more cumbersome. The primary reason for this rule
#   is "It's provided for developers who program in languages that do not support overloaded operators." but
#   we don't really care about these language (whatever they are).
dotnet_diagnostic.CA2225.severity = none
