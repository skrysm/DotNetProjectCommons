<!--

  Default settings for all production code (i.e. non-test) projects.

  To use it, create a .NET Core or .NET Standard project (modern project format)
  and then add this line at the top:

    <Import Project="$(ProjectCommonsDirectory)Project.Code.props" />

-->
<!-- You can find the latest version of this file here: https://github.com/skrysmanski/base-dotnet -->
<Project>

  <Import Project="$(MSBuildThisFileDirectory)Project.Shared.props" />
  <Import Project="$(MSBuildThisFileDirectory)Project.Code_Packages.props" />

  <PropertyGroup Label="Build Settings">
    <!--
      Since this project template is primarily used for open source, there's no point in "hiding"
      the debug symbols (as it's often the case in closed source software). So, by default, debug
      symbols are embedded in the assembly itself.

      The only real downside of this is that the assembly gets noticeably bigger (usually about 30%).
      However, in most cases, we're still talking about kB here - not MB. So we use this as default
      and library owners can change it back to "portable", if necessary.

      See also: https://github.com/dotnet/sdk/issues/2679

      NOTE: With <DeterministicSourcePaths> enabled for NuGet packages (in Release mode), the debug
        symbols will not(!) contain the directory names from build machine anymore (like "D:\Programming\...").
        See "Project.NuGetPackage.props" for more details.
    -->
    <DebugSymbols>true</DebugSymbols>
    <!-- NOTE: "embedded" means "embedded portable". It's the same format as "portable", just integrated into the assembly. -->
    <DebugType>embedded</DebugType>
  </PropertyGroup>

  <!--
    Make copyright based on assembly name (a best pratice for open source projects).

    For some more details on copyrights in open source projects, see:
    * https://www.linuxfoundation.org/blog/2020/01/copyright-notices-in-open-source-software-projects/
    * https://docs.github.com/en/free-pro-team@latest/github/site-policy/github-terms-of-service#6-contributions-under-repository-license
  -->
  <Target Name="_GenerateCopyright" BeforeTargets="GetAssemblyAttributes" Condition=" '$(Copyright)' == '' ">
    <PropertyGroup>
      <Copyright>© $([System.DateTime]::Now.ToString(yyyy)) Contributors to $(AssemblyName)</Copyright>
    </PropertyGroup>
  </Target>

  <!--
    Put the current commit's id (hash) in the "Product version" ($(InformationalVersion)). This happens automatically
    via the $(SourceRevisionId) property.

    This version is visible in the "Details" tab of the file properties of the generated assembly.

    See: https://docs.microsoft.com/en-us/dotnet/core/tools/csproj#assemblyinfo-properties
  -->
  <Target Name="_GenerateSourceRevisionId" BeforeTargets="GetAssemblyVersion" Condition=" '$(SourceRevisionId)' == '' AND '$(RepositoryType)' == 'git' ">
    <Exec Command="git rev-parse --short=12 HEAD" ConsoleToMSBuild="true" StandardOutputImportance="low">
      <Output TaskParameter="ConsoleOutput" PropertyName="SourceRevisionId" />
    </Exec>
  </Target>

  <!--
    Sets "File Description" property (in the Details tab in the file properties of the generated assembly) to $(Description),
    if there is one. Otherwise, by default, this value is set to the name of the assembly.
  -->
  <Target Name="_GenerateFileDescriptionInfo" BeforeTargets="GetAssemblyAttributes" Condition=" '$(Description)' != '' ">
    <PropertyGroup>
      <AssemblyTitle>$(Description)</AssemblyTitle>
    </PropertyGroup>
  </Target>

  <!--
    Checks that a <Version> has been specified for this project/assembly. If none is
    set, the version defaults to "1.0.0.0". This version number, if not chosen deliberatly -
    could potentially be problematic if, say, a created NuGet package was accidentially
    uploaded. Because of these problems, we require each code project to explicetly specify
    a version number.
  -->
  <PropertyGroup>
    <Version>0.0.0.0</Version>
  </PropertyGroup>

  <Target Name="_CheckVersion" AfterTargets="GetAssemblyAttributes" Condition="'$(Configuration)' == 'Release'">
    <Error Text="No &lt;Version&gt; has been specified." Condition=" '$(Version)' == '0.0.0.0' " />
  </Target>

  <!--
    Defines assembly wide attributes.

    For "custom" assembly attributes, see: https://github.com/dotnet/msbuild/issues/2281#issuecomment-803217731
  -->
  <ItemGroup Label="Assembly Attributes">
    <!--
      Make internals automatically available to the associated tests project.
    -->
    <InternalsVisibleTo Include="$(MSBuildProjectName).Tests" />

    <!--
      Mark this assembly as "CLS compliant" or "not CLS compliant".

      "CLS compliant" means that an assembly can be consumed by any .NET language - including F# and
      VisualBasic.NET. If it's not CLS compliant, it can only be consumed by C# code (at least
      that's the theory).

      There are various ways for a method or type to become "not CLS compliant". The most obvious
      way is to use unsigned data types (like "uint") for parameters or properties. You can find
      the whole list here: https://docs.microsoft.com/en-us/dotnet/standard/language-independence

      You can have a CLS compliant assembly that contains not CLS compliant code - by attributing the
      not compliante code with "[CLSCompliant(false)]".

      While it appears to be useful to have assemblies to be "CLS compliant" (and just attributing
      not compliant code where needed), there is the problem of the "[CLSCompliant(false)] fallout".
      By attributing one method or type, other methods or type may then also need be attributed, then
      other again and so forth. It's the same effect that you have by adding "IDisposable" to an
      existing type or "async" to an existing method. This problem is also magnified by the fact that,
      in interfaces, you can't just attribute a single member with "[CLSCompliant(false)]" but you have
      to attribute the whole interface in this case (which then makes implementers of this interface
      also not compliant).

      While it's easy to avoid using unsigned data types, using "IConvertible" (for performance reasons)
      also makes the method/type not CLS compliant. Not being able to use "IConvertible" is a big disadvantage
      of CLS compliant libraries. Sure, there are "creative" ways to work around this problem but in the
      end they often lead to less optimal APIs.

      Because of all of this, and because AppMotor projects only target C# code, it was decided to mark
      all assemblies as "not CLS compliant" (which is also the default for C# libraries). This makes
      writing code easier and less painful.

      See also: https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/CA1014
    -->
    <AssemblyAttribute Include="System.CLSCompliantAttribute">
        <_Parameter1 Condition=" '$(ClsCompliant)' == 'true' ">true</_Parameter1>
        <_Parameter1 Condition=" '$(ClsCompliant)' != 'true' ">false</_Parameter1>
    </AssemblyAttribute>
  </ItemGroup>

  <!--
    .NET static code analysis

    See: https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/overview
  -->
  <PropertyGroup Label="Code Analysis">
    <!--
      Enable all CA rules by default. Otherwise only a small subset will be enabled by default.
      See: https://docs.microsoft.com/en-us/dotnet/core/project-sdk/msbuild-props#analysismode
    -->
    <AnalysisMode>AllEnabledByDefault</AnalysisMode>

    <!--
      Adds a report to the build log which shows which rule took how long. This can be used to diagnose 
      which rules make the build slow. Note, however, that rules are evaluated in parallel - so the 
      reported times are not 100% accurate/reliable.

      Requires log level "Detailed". Search for "Total analyzer execution time" in the build log.

      See: https://github.com/dotnet/roslyn/blob/main/docs/analyzers/Report%20Analyzer%20Format.md
    -->
    <ReportAnalyzer>true</ReportAnalyzer>
  </PropertyGroup>

  <ItemGroup Label="Code Analysis">
    <!-- This file specifies the severities of all CA rules. -->
    <GlobalAnalyzerConfigFiles Include="$(MSBuildThisFileDirectory)CA.globalconfig" />
  </ItemGroup>

  <!--
    JetBrains/ReSharper annoation must be explicitely enabled to be compiled into the resulting binary.

    Can be disabled through <EmbedJetbrainsAnnotations>false</EmbedJetbrainsAnnotations>.

    See: https://www.jetbrains.com/help/resharper/Code_Analysis__Annotations_in_Source_Code.html#embedding-declarations-of-code-annotations-in-your-source-code
  -->
  <Target Name="_EmbedJetbrainsAnnotations" BeforeTargets="GetAssemblyAttributes" Condition=" '$(EmbedJetbrainsAnnotations)' != 'false' ">
    <PropertyGroup Label="JetBrains.Annotations">
      <DefineConstants >$(DefineConstants);JETBRAINS_ANNOTATIONS</DefineConstants>
    </PropertyGroup>
  </Target>

</Project>
